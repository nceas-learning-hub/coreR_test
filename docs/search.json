[
  {
    "objectID": "slides/r_programming_introduction/example_slides.html#title-slide",
    "href": "slides/r_programming_introduction/example_slides.html#title-slide",
    "title": "coreR Test Course: 2024-01-01 - 2024-12-31",
    "section": "",
    "text": "Working with R & RStudio\nAn introduction to programming in R\n\n\nNCEAS Learning HubcoreRMay 2025"
  },
  {
    "objectID": "slides/r_programming_introduction/example_slides.html#welcom-to-r",
    "href": "slides/r_programming_introduction/example_slides.html#welcom-to-r",
    "title": "coreR Test Course: 2024-01-01 - 2024-12-31",
    "section": "",
    "text": "Welcome to programming in R\n\n\nR is a great language to learn data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source!\n\n\n\n\nArtwork by Allison Horst\n\n\n\n\nSo what is the difference between R and RStudio?"
  },
  {
    "objectID": "slides/r_programming_introduction/example_slides.html#r-rstudio",
    "href": "slides/r_programming_introduction/example_slides.html#r-rstudio",
    "title": "coreR Test Course: 2024-01-01 - 2024-12-31",
    "section": "",
    "text": "R vs RStudio\n\n\n\nR is a knife. You have food to prepare, and the knife is one of the tools that you’ll use to accomplish your task. \nRStudio is the kitchen. RStudio provides a place to do your work!"
  },
  {
    "objectID": "slides/r_programming_introduction/example_slides.html#rstudio-ide",
    "href": "slides/r_programming_introduction/example_slides.html#rstudio-ide",
    "title": "coreR Test Course: 2024-01-01 - 2024-12-31",
    "section": "",
    "text": "RStudio IDE\n\n\nLet’s take a tour of the RStudio interface.\n\n\n\n\n\nQuick Tip: You can change the default location of the panes, among many other things. More information here"
  },
  {
    "objectID": "slides/r_programming_introduction/example_slides.html#example-code-slide",
    "href": "slides/r_programming_introduction/example_slides.html#example-code-slide",
    "title": "coreR Test Course: 2024-01-01 - 2024-12-31",
    "section": "",
    "text": "Example Code\n\n\nCreating an object\n\n\n# think of this code as someone saying \"important_value gets 12\".\nimportant_value &lt;- 3*4"
  },
  {
    "objectID": "index.html#about-the-course",
    "href": "index.html#about-the-course",
    "title": "Welcome to coreR!",
    "section": "About the course",
    "text": "About the course\nThis is a test course to show off the functionality of the coreR and coreRlessons packages",
    "crumbs": [
      "Welcome to coreR!"
    ]
  },
  {
    "objectID": "index.html#nceas-expertise",
    "href": "index.html#nceas-expertise",
    "title": "Welcome to coreR!",
    "section": "1 NCEAS Expertise",
    "text": "1 NCEAS Expertise\nThe National Center for Ecological Analysis and Synthesis (NCEAS), a research affiliate of UCSB, is a leading expert on interdisciplinary data science and works collaboratively to answer the world’s largest and most complex questions. The NCEAS approach leverages existing data and employs a team science philosophy to squeeze out all potential insights and solutions efficiently - this is called synthesis science.\nNCEAS has over 25 years of success with this model among working groups and environmental professionals. Together with the Delta Science Program and the Delta Stewardship Council we are excited to pass along skills, workflows, mindsets learn throughout the years.\n\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\nEffectively manage data using tidy data practices\nImplement reproducible scientific workflows throughout all aspects of a project\nEstablish best practices and utilize tools like Git & GitHub to optimize your collaboration\nBetter communicate scientific analyses and results using Markdown, GitHub webpages, and R packages like ggplot2 and Shiny\nIncrease your familiarity and confidence with data science tools\n\n\n\n\n1.1 Week’s Schedule\n\n\n\n\n\n1.2 testing callouts:\nNOTE it looks like including title=\"title of callout\" in the callout doesn’t work… and either does the header method that works for standard callouts… oh well, still pretty cool. Look at NCEAS Learning Hub style sheet for color ideas.\n\n\n\n\n\n\nExercise 1\n\n\n\n\n\n\nHere’s the exercise\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nhere’s the hint!\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nhere’s the nested answer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nhere’s the hint, not nested or collapsed\n\n\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nhere’s the non-nested answer\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n\n\n\n\nhere’s an example\nand more text",
    "crumbs": [
      "Welcome to coreR!"
    ]
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Welcome to coreR!",
    "section": "2 Code of Conduct",
    "text": "2 Code of Conduct\nBy participating in this activity you agree to abide by the NCEAS Code of Conduct.",
    "crumbs": [
      "Welcome to coreR!"
    ]
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Welcome to coreR!",
    "section": "3 About this book",
    "text": "3 About this book\nThese written materials are the result of a continuous and collaborative effort at NCEAS to help researchers make their work more transparent and reproducible. This work began in the early 2000’s, and reflects the expertise and diligence of many, many individuals. The primary authors are listed in the citation below, with additional contributors recognized for their role in developing previous iterations of these or similar materials.\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nCitation: Camila Vargas Poulsen & Angel Chen (2024), NCEAS coreR for Delta Science Program, June 2024, NCEAS Learning Hub. URL https://learning.nceas.ucsb.edu/2024-06-delta.\nAdditional contributors: Ben Bolker, Amber E. Budden, Julien Brun, Samantha Csik, Halina Do-Linh, Natasha Haycock-Chavez, S. Jeanette Clark, Julie Lowndes, Stephanie Hampton, Matt Jone, Samanta Katz, Erin McLean, Bryce Mecum, Deanna Pennington, Karthik Ram, Jim Regetz, Tracy Teal, Daphne Virlar-Knight, Leah Wasser.\nThis is a Quarto book. To learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Welcome to coreR!"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html",
    "href": "s01_r_programming_introduction.html",
    "title": "Working in R & RStudio",
    "section": "",
    "text": "Get oriented with the RStudio interface\nRun code and basic arithmetic in the Console\nPractice writing code in an R Script\nBe introduced to built-in R functions\nUse the Help pages to look up function documentation\n\nFull Screen\n\n\nThis lesson is a combination of excellent lessons by others. Huge thanks to Julie Lowndes for writing most of this content and letting us build on her material, which in turn was built on Jenny Bryan’s materials. We highly recommend reading through the original lessons and using them as reference (see in the resources section below).",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#learning-objectives",
    "href": "s01_r_programming_introduction.html#learning-objectives",
    "title": "Working in R & RStudio",
    "section": "",
    "text": "Get oriented with the RStudio interface\nRun code and basic arithmetic in the Console\nPractice writing code in an R Script\nBe introduced to built-in R functions\nUse the Help pages to look up function documentation\n\nFull Screen\n\n\nThis lesson is a combination of excellent lessons by others. Huge thanks to Julie Lowndes for writing most of this content and letting us build on her material, which in turn was built on Jenny Bryan’s materials. We highly recommend reading through the original lessons and using them as reference (see in the resources section below).",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#welcome-to-r-programming",
    "href": "s01_r_programming_introduction.html#welcome-to-r-programming",
    "title": "Working in R & RStudio",
    "section": "1 Welcome to R Programming",
    "text": "1 Welcome to R Programming\n\n\n\nArtwork by Allison Horst\n\n\nThere is a vibrant community out there that is collectively developing increasingly easy to use and powerful open source programming tools. The changing landscape of programming is making learning how to code easier than it ever has been. Incorporating programming into analysis workflows not only makes science more efficient, but also more computationally reproducible. In this course, we will use the programming language R, and the accompanying integrated development environment (IDE) RStudio. R is a great language to learn for data-oriented programming because it is widely adopted, user-friendly, and (most importantly) open source!\nSo what is the difference between R and RStudio? Here is an analogy to start us off. If you were a chef, R is a knife. You have food to prepare, and the knife is one of the tools that you’ll use to accomplish your task.\nAnd if R were a knife, RStudio is the kitchen. RStudio provides a place to do your work! RStudio makes your life as a researcher easier by bringing together other tools you need to do your work efficiently - like a file browser, data viewer, help pages, terminal, community, support, the list goes on. So it’s not just the infrastructure (the user interface or IDE), although it is a great way to learn and interact with your variables, files, and interact directly with git. It’s also data science philosophy, R packages, community, and more. Although you can prepare food without a kitchen and we could learn R without RStudio, that’s not what we’re going to do. We are going to take advantage of the great RStudio support, and learn R and RStudio together.\nSomething else to start us off is to mention that you are learning a new language here. It’s an ongoing process, it takes time, you’ll make mistakes, it can be frustrating, but it will be overwhelmingly awesome in the long run. We all speak at least one language; it’s a similar process, really. And no matter how fluent you are, you’ll always be learning, you’ll be trying things in new contexts, learning words that mean the same as others, etc, just like everybody else. And just like any form of communication, there will be miscommunication that can be frustrating, but hands down we are all better off because of it.\nWhile language is a familiar concept, programming languages are in a different context from spoken languages and you will understand this context with time. For example: you have a concept that there is a first meal of the day, and there is a name for that: in English it’s “breakfast.” So if you’re learning Spanish, you could expect there is a word for this concept of a first meal. (And you’d be right: “desayuno”). We will get you to expect that programming languages also have words (called functions in R) for concepts as well. You’ll soon expect that there is a way to order values numerically. Or alphabetically. Or search for patterns in text. Or calculate the median. Or reorganize columns to rows. Or subset exactly what you want. We will get you to increase your expectations and learn to ask and find what you’re looking for.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#rstudio-ide",
    "href": "s01_r_programming_introduction.html#rstudio-ide",
    "title": "Working in R & RStudio",
    "section": "2 RStudio IDE",
    "text": "2 RStudio IDE\nLet’s take a tour of the RStudio interface.\n\nNotice the default panes:\n\nConsole (entire left)\nEnvironment/History (tabbed in upper right)\nFiles/Plots/Packages/Help (tabbed in lower right)\n\n\n\n\n\n\n\ntesting tip title\n\n\n\n\n\nYou can change the default location of the panes, among many other things, see Customizing RStudio.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#coding-in-the-console",
    "href": "s01_r_programming_introduction.html#coding-in-the-console",
    "title": "Working in R & RStudio",
    "section": "3 Coding in the Console",
    "text": "3 Coding in the Console\n\n\n\n\n\n\nBut first, an important first question: where are we?\n\n\n\nIf you’ve just opened RStudio for the first time, you’ll be in your Home directory. This is noted by the ~/ at the top of the console. You can see too that the Files pane in the lower right shows what is in the Home directory where you are. You can navigate around within that Files pane and explore, but note that you won’t change where you are: even as you click through you’ll still be Home: ~/.\n\n\n\n\n\n\n\nWe can run code in a couple of places in RStudio, including the Console, let’s start there.\nAt it’s most basic, we can use R as a calculator, let’s try a couple of examples in the console.\n\n# run in the console\n# really basic examples\n3*4\n3+4\n3-4\n3/4\n\nWhile there are many cases where it makes sense to type code directly in to the the console, it is not a great place to write most of your code since you can’t save what you ran. A better way is to create an R Script, and write your code there. Then when you run your code from the script, you can save it when you are done. We’re going to continue writing code in the Console for now, but we’ll code in an R Script later in this lesson\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the console you’ll see a greater than sign (&gt;) at the start of a line. This is called the “prompt” and when we see it, it means R is ready to accept commands. If you see a plus sign (+) in the Console, it means R is waiting on additional information before running. You can always press escape (esc) to return to the prompt. Try practicing this by running 3* (or any incomplete expression) in the console.\n\n\n\n3.1 Objects in R\nLet’s say the value of 12 that we got from running 3*4 is a really important value we need to keep. To keep information in R, we need to create an object. The way information is stored in R is through objects.\nWe can assign a value of a mathematical operation (and more!) to an object in R using the assignment operator, &lt;- (greater than sign and minus sign). All objects in R are created using the assignment operator, following this form: object_name &lt;- value.\n\n\n\n\n\n\nExercise: Create an object\n\n\n\nAssign 3*4 to an object called important_value and then inspect the object you just created.\n\n\n\n# think of this code as someone saying \"important_value gets 12\".\nimportant_value &lt;- 3*4\n\nNotice how after creating the object, R doesn’t print anything. However, we know our code worked because we see the object, and the value we wanted to store is now visible in our Global Environment. We can force R to print the value of the object by calling the object name (aka typing it out) or by using parentheses.\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you begin typing an object name RStudio will automatically show suggested completions for you that you can select by hitting tab, then press return.\n\n\n\n# printing the object by calling the object name\nimportant_value\n\n[1] 12\n\n# printing the object by wrapping the assignment syntax in parentheses\n(important_value &lt;- 3*4)\n\n[1] 12\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you’re in the Console use the up and down arrow keys to call your command history, with the most recent commands being shown first.\n\n\n\n\n3.2 Naming Conventions\nBefore we run more calculations, let’s talk about naming objects. For the object, important_value we used an underscore to separate the object name. This naming convention is called snake case. There are other naming conventions including, but not limited to:\n\nwe_used_snake_case\nsomeUseCamelCase\nSomeUseUpperCamelCaseAlsoCalledPascalCase\n\nChoosing a naming convention is a personal preference, but once you choose one - be consistent! A consistent naming convention will increase the readability of your code for others and your future self.\n\n\n\n\n\n\nQuick Tip\n\n\n\nObject names cannot start with a digit and cannot contain certain characters such as a comma or a space.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#running-code-in-an-r-script",
    "href": "s01_r_programming_introduction.html#running-code-in-an-r-script",
    "title": "Working in R & RStudio",
    "section": "4 Running code in an R Script",
    "text": "4 Running code in an R Script\nSo far we’ve been running code in the Console, let’s try running code in an R Script. An R Script is a simple text file. RStudio uses an R Script by copying R commands from text in the file and pastes them into the Console as if you were manually entering commands yourself.\n\n\n\n\n\n\nCreating an R Script\n\n\n\n\nFrom the “File” menu, select “New File”\nClick “R Script” from the list of options\n\nRStudio should open your R Script automatically after creating it. Notice a new pane appears above the Console. This is called the Source pane and is where we write and edit R code and documents. This pane is only present if there are files open in the editor.\n\nSave the R Script in your script folder, name the file intro-to-programming.R\n\n\n\n\n4.1 How to run code in an R Script\nRunning code in an R Script is different than running code in the Console (aka you can’t just press return / enter). To interpret and run the code you’ve written, R needs you to send the code from the script (or editor) to the Console. Some common ways to run code in an R Script include:\n\nPlace your cursor on the line of code you want to run and use the shortcut command + return or click the Run button in the top right of the Source pane.\nHighlight the code you want to run, then use the shortcut command + return or click the Run button.\n\n\n\n4.2 R calculations with objects\nSo we know that objects are how R stores information, and we know we create objects using the assignment operator &lt;-. Let’s build upon that and learn how to use an object in calculations.\nImagine we have the weight of a dog in kilograms. Create the object weight_kg and assign it a value of 25.\n\n# weight of a dog in kilograms\nweight_kg &lt;- 25\n\nNow that R has weight_kg saved in the Global Environment, we can run calculations with it.\n\n\n\n\n\n\nExercise: Using weight_kg run a simple calculation\n\n\n\nLet’s convert the weight into pounds. Weight in pounds is 2.2 times the weight in kg.\n\n\n\n# converting weight from kilograms to pounds\n2.2 * weight_kg\n\n[1] 55\n\n\nYou can also store more than one value in a single object. Storing a series of weights in a single object is a convenient way to perform the same operation on multiple values at the same time. One way to create such an object is with the function c(), which stands for combine or concatenate.\nFirst let’s create a vector of weights in kilograms using c() (we’ll talk more about vectors in the next section, Data structures in R).\n\n# create a vector of weights in kilograms\nweight_kg &lt;- c(25, 33, 12)\n# call the object to inspect\nweight_kg\n\n[1] 25 33 12\n\n\nNow convert the vector weight_kg to pounds.\n\n# covert `weight_kg` to pounds \nweight_kg * 2.2\n\n[1] 55.0 72.6 26.4\n\n\nWouldn’t it be helpful if we could save these new weight values we just converted? This might be important information we may need for a future calculation. How would you save these new weights in pounds?\n\n# create a new object \nweight_lb &lt;- weight_kg * 2.2\n# call `weight_lb` to check if the information you expect is there\nweight_lb\n\n[1] 55.0 72.6 26.4\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou will make many objects and the assignment operator &lt;- can be tedious to type over and over. Instead, use RStudio’s keyboard shortcut: option + - (the minus sign).\nNotice that RStudio automatically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces.\nRStudio offers many handy keyboard shortcuts. Also, option+Shift+K brings up a keyboard shortcut reference card.\nFor more RStudio tips, check out Master of Environmental Data Science (MEDS) workshop: IDE Tips & Tricks.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#data-types-class-in-r",
    "href": "s01_r_programming_introduction.html#data-types-class-in-r",
    "title": "Working in R & RStudio",
    "section": "5 Data types (class) in R",
    "text": "5 Data types (class) in R\n\nCommon data types in R\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\nboolean (also called logical)\nData take on the value of either TRUE, FALSE, or NA. NA is used to represent missing values.\n\n\ncharacter\nData are string values. You can think of character strings as something like a word (or multiple words). A special type of character string is a factor, which is a string but with additional attributes (like levels or an order).\n\n\ninteger\nData are whole numbers (those numbers without a decimal point). To explicitly create an integer data type, use the suffix L (e.g. 2L).\n\n\nnumeric (also called double)\nData are numbers that contain a decimal.\n\n\n\n\nLess common data types (we won’t be going into these data types this course)\n\n\n\n\n\n\nData Type\nDefinition\n\n\n\n\ncomplex\nData are complex numbers with real and imaginary parts.\n\n\nraw\nData are raw bytes.\n\n\n\nWe’ve been using primarily integer or numeric data types so far. Let’s create an object that has a string value or a character data type.\n\nscience_rocks &lt;- \"yes it does!\"\n\n“yes it does!” is a string, and R knows it’s a word and not a number because it has quotes \" \". You can work with strings in your data in R easily thanks to the stringr and tidytext packages.\nThis lead us to an important concept in programming: As we now know, there are different “classes” or types of objects in R. The operations you can do with an object will depend on what type of object it is because each object has their own specialized format, designed for a specific purpose. This makes sense! Just like you wouldn’t do certain things with your car (like use it to eat soup), you won’t do certain operations with character objects (strings).\nAlso, everything in R is an object. An object is a variable, function, data structure, or method that you have written to your environment.\nTry running the following line in your script:\n\n\"Hello world!\" * 3\n\nWhat happened? What do you see in the Console? Why?\n\n\n\n\n\n\nQuick Tip\n\n\n\nYou can see what data type or class an object is using the class() function, or you can use a logical test such as: is.numeric(), is.character(), is.logical(), and so on.\n\nclass(science_rocks) # returns character\nis.numeric(science_rocks) # returns FALSE\nis.character(science_rocks) # returns TRUE",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#data_structures",
    "href": "s01_r_programming_introduction.html#data_structures",
    "title": "Working in R & RStudio",
    "section": "6 Data structures in R",
    "text": "6 Data structures in R\nOkay, now let’s talk about vectors.\nA vector is the most common and most basic data structure in R. Vectors can be thought of as a way R stores a collection of values or elements. Think back to our weight_lb vector. That was a vector of three elements each with a data type or class of numeric.\nWhat we’re describing is a specific type of vector called atomic vectors. To put it simply, atomic vectors only contain elements of the same data type. Atomic vectors are very common.\nVectors are foundational for other data structures in R, including data frames, and while we won’t go into detail about other data structures there are great resources online that do. We recommend the chapter Vectors from the online book Advanced R by Hadley Wickham.\n\n# atomic vector examples #\n# character vector\nchr_vector &lt;- c(\"hello\", \"good bye\", \"see you later\")\n# numeric vector\nnumeric_vector &lt;- c(5, 1.3, 10)\n# logical vector\nboolean_vector &lt;- c(TRUE, FALSE, TRUE)",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#r-functions",
    "href": "s01_r_programming_introduction.html#r-functions",
    "title": "Working in R & RStudio",
    "section": "7 R Functions",
    "text": "7 R Functions\nSo far we’ve learned some of the basic syntax and concepts of R programming, and how to navigate RStudio, but we haven’t done any complicated or interesting programming processes yet. This is where functions come in!\nA function is a way to group a set of commands together to undertake a task in a reusable way. When a function is executed, it produces a return value. We often say that we are “calling” a function when it is executed. Functions can be user defined and saved to an object using the assignment operator, so you can write whatever functions you need, but R also has a mind-blowing collection of built-in functions ready to use. To start, we will be using some built in R functions.\nAll functions are called using the same syntax: function name with parentheses around what the function needs in order to do what it was built to do. These “needs” are pieces of information called arguments, and are required to return an expected value.\n\n\n\n\n\n\nSyntax of a function will look something like:\n\n\n\nresult_value &lt;- function_name(argument1 = value1, argument2 = value2, ...)\n\n\nBefore we use a function, let’s talk about Help pages.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#getting-help-using-help-pages",
    "href": "s01_r_programming_introduction.html#getting-help-using-help-pages",
    "title": "Working in R & RStudio",
    "section": "8 Getting help using help pages",
    "text": "8 Getting help using help pages\nWhat if you know the name of the function that you want to use, but don’t know exactly how to use it? Thankfully RStudio provides an easy way to access the help documentation for functions.\nThe next function we’re about to use is the mean() function.\nTo access the help page for mean(), enter the following into your console:\n\n?mean\n\nThe Help pane will show up in the lower right hand corner of your RStudio.\nThe Help page is broken down into sections:\n\nDescription: An extended description of what the function does.\nUsage: The arguments of the function(s) and their default values.\nArguments: An explanation of the data each argument is expecting.\nDetails: Any important details to be aware of.\nValue: The data the function returns.\nSee Also: Any related functions you might find useful.\nExamples: Some examples for how to use the function.\n\nAnd there’s also help for when you only sort of remember the function name: double-question mark:\n\n??install \n\n\n\n\n\n\n\nNot all functions have (or require) arguments\n\n\n\nCheck out the documentation or Help page for date().\n\n?date()",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "href": "s01_r_programming_introduction.html#examples-using-built-in-r-functions-mean-and-read.csv",
    "title": "Working in R & RStudio",
    "section": "9 Examples using built-in R functions mean() and read.csv()",
    "text": "9 Examples using built-in R functions mean() and read.csv()\n\n9.1 Use the mean() function to run a more complex calculation\nLet’s override our weight object with some new values, and this time we’ll assign it three dog weights in pounds:\n\nweight_lb &lt;- c(55, 25, 12)\n\n\n\n\n\n\n\nExercise: Use the mean() function to calculate the mean weight.\n\n\n\nFrom the its Help page, we learned this function will take the mean of a set of numbers. Very convenient!\nWe also learned that mean() only has one argument we need to supply a value to (x). The rest of the arguments have default values.\n\n\n\n\nCode\nmean(x = weight_lb)\n\n\n[1] 30.66667\n\n\n\n\n\n\n\n\nExercise: Save the mean to an object called mean_weight_lb\n\n\n\nHint: What operator do we use to save values to an object?\n\n\n\n\nCode\n# saving the mean using the assignment operator `&lt;-`\nmean_weight_lb &lt;- mean(x = weight_lb)\n\n\n\n\n\n\n\n\nExercise: Update weight_lb\n\n\n\nLet’s say each of the dogs gained 5 pounds and we need to update our vector, so let’s change our object’s value by assigning it new values.\n\n\n\n\nCode\nweight_lb &lt;- c(60, 30, 17)\n\n\nCall mean_weight_lb in the console or take a look at your Global Environment. Is that the value you expected? Why or why not?\nIt wasn’t the value we expected because mean_weight_lb did not change. This demonstrates an important R programming concept: Assigning a value to one object does not change the values of other objects in R.\nNow that we understand why the object’s value hasn’t changed - how do we update the value of mean_weight_lb? How is an R Script useful for this?\nThis lead us to another important programming concept, specifically for R Scripts: An R Script runs top to bottom.\nThis order of operations is important because if you are running code line by line, the values in object may be unexpected. When you are done writing your code in an R Script, it’s good practice to clear your Global Environment and use the Run button and select “Run all” to test that your R Script successfully runs top to bottom.\n\n\n9.2 Use the read.csv() function to read a file into R\nSo far we have learned how to assign values to objects in R, and what a function is, but we haven’t quite put it all together yet with real data yet. To do this, we will introduce the function read.csv(), which will be in the first lines of many of your future scripts. It does exactly what it says, it reads in a csv file to R.\nSince this is our first time using this function, first access the help page for read.csv(). This has a lot of information in it, as this function has a lot of arguments, and the first one is especially important - we have to tell it what file to look for. Let’s get a file!\n\n\n\n\n\n\nDownload a file from the Arctic Data Center\n\n\n\n\nNavigate to this dataset by Craig Tweedie that is published on the Arctic Data Center. Craig Tweedie. 2009. North Pole Environmental Observatory Bottle Chemistry. Arctic Data Center. doi:10.18739/A25T3FZ8X.\nDownload the first csv file called BGchem2008data.csv by clicking the “download” button next to the file.\nClick the “Upload” button in your RStudio server file browser.\nIn the dialog box, make sure the destination directory is the data directory in your R project, click “Choose File,” and locate the BGchem2008data.csv file. Press “OK” to upload the file.\nCheck your file was successfully uploaded by navigating into your data folder in the Files pane.\n\n\n\nNow we have to tell read.csv() how to find the file. We do this using the file argument which you can see in the usage section in the help page. In R, you can either use absolute paths (which will start with your home directory ~/) or paths relative to your current working directory. RStudio has some great auto-complete capabilities when using relative paths, so we will go that route.\nAssuming you have moved your file to a folder within training_{USERNAME} called data, and your working directory is your project directory (training_{USERNAME}) your read.csv() call will look like this:\n\n# reading in data using relative paths\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nYou should now have an object of the class data.frame in your environment called bg_chem_dat. Check your environment pane to ensure this is true. Or you can check the class using the function class() in the console.\n\n\n\n\n\n\nOptional Arguments\n\n\n\nNotice that in the Help page there are many arguments that we didn’t use in the call above. Some of the arguments in function calls are optional, and some are required.\nOptional arguments will be shown in the usage section with a name = value pair, with the default value shown. If you do not specify a name = value pair for that argument in your function call, the function will assume the default value (example: header = TRUE for read.csv()).\nRequired arguments will only show the name of the argument, without a value. Note that the only required argument for read.csv() is file.\n\n\nYou can always specify arguments in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want file = \"data/BGchem2008data.csv\", since file is the first argument.\nIf we explicitly called the file argument our code would like this:\n\nbg_chem_dat &lt;- read.csv(file = \"data/BGchem2008data.csv\")\n\nIf we wanted to add another argument, say stringsAsFactors, we need to specify it explicitly using the name = value pair, since the second argument is header.\nMany R users (including myself) will set the stringsAsFactors argument using the following call:\n\n# relative file path\nbg_chem_dat &lt;- read.csv(\"data/BGchem2008data.csv\", stringsAsFactors = FALSE)\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nFor functions that are used often, you’ll see many programmers will write code that does not explicitly call the first or second argument of a function.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#working-with-data-frames-in-r-using-the-subset-operator",
    "href": "s01_r_programming_introduction.html#working-with-data-frames-in-r-using-the-subset-operator",
    "title": "Working in R & RStudio",
    "section": "10 Working with data frames in R using the Subset Operator $",
    "text": "10 Working with data frames in R using the Subset Operator $\nA data.frame is a list data structure in R that can represent tables and spreadsheets – we can think of it as a table. It is a collection of rows and columns of data, where each column has a name and represents a variable, and each row represents an observation containing a measurement of that variable. When we ran read.csv(), the object bg_chem_dat that we created was a data.frame. The columns in a data.frame might represent measured numeric response values (e.g., weight_kg), classifier variables (e.g., site_name), or categorical response variables (e.g., course_satisfaction). There are many ways R and RStudio help you explore data frames. Here are a few, give them each a try:\n\nClick on the word bg_chem_dat in the environment pane\nClick on the arrow next to bg_chem_dat in the environment pane\nExecute head(bg_chem_dat) in the Console\nExecute View(bg_chem_dat) in the Console\n\nUsually we will want to run functions on individual columns in a data.frame. To call a specific column, we use the list subset operator $.\nSay you want to look at the first few rows of the Date column only:\n\nhead(bg_chem_dat$Date)\n\nYou can also use the subset operator $ calculations. For example, let’s calculated the mean temperature of all the CTD samples.\n\nmean(bg_chem_dat$CTD_Temperature)\n\nYou can also save this calculation to an object that was created using the subset operator $.\n\nmean_temp &lt;- mean(bg_chem_dat$CTD_Temperature)\n\n\n\n\n\n\n\nOther ways to load tablular data\n\n\n\nWhile the base R package provides read.csv as a common way to load tabular data from text files, there are many other ways that can be convenient and will also produce a data.frame as output. Here are a few:\n\nUse the readr::read_csv() function from the Tidyverse to load the data file. The readr package has a bunch of convenient helpers and handles CSV files in typically expected ways, like properly typing dates and time columns. bg_chem_dat &lt;- readr::read_csv(\"data/BGchem2008data.csv\")\nLoad tabular data from Excel spreadsheets using the readxl::read_excel() function.\nLoad tabular data from Google Sheets using the googlesheets4::read_sheet() function.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#error-messages-are-your-friends",
    "href": "s01_r_programming_introduction.html#error-messages-are-your-friends",
    "title": "Working in R & RStudio",
    "section": "11 Error messages are your friends",
    "text": "11 Error messages are your friends\nThere is an implicit contract with the computer/scripting language: Computer will do tedious computation for you. In return, you will be completely precise in your instructions. Typos matter. Case matters. Pay attention to how you type.\nRemember that this is a language, not dissimilar to English! There are times you aren’t understood – it’s going to happen. There are different ways this can happen. Sometimes you’ll get an error. This is like someone saying ‘What?’ or ‘Pardon’? Error messages can also be more useful, like when they say ‘I didn’t understand this specific part of what you said, I was expecting something else’. That is a great type of error message. Error messages are your friend. Google them (copy-and-paste!) to figure out what they mean. Note that knowing how to Google is a skill and takes practice - use our Masters of Environmental Data Science (MEDS) program workshop Teach Me How to Google as a guide.\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd also know that there are errors that can creep in more subtly, without an error message right away, when you are giving information that is understood, but not in the way you meant. Like if I’m telling a story about tables and you’re picturing where you eat breakfast and I’m talking about data. This can leave me thinking I’ve gotten something across that the listener (or R) interpreted very differently. And as I continue telling my story you get more and more confused… So write clean code and check your work as you go to minimize these circumstances!",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#r-packages",
    "href": "s01_r_programming_introduction.html#r-packages",
    "title": "Working in R & RStudio",
    "section": "12 R Packages",
    "text": "12 R Packages\n\n\n\nArtwork by Allison Horst\n\n\nR packages are the building blocks of computational reproducibility in R. Each package contains a set of related functions that enable you to more easily do a task or set of tasks in R. There are thousands of community-maintained packages out there for just about every imaginable use of R - including many that you have probably never thought of!\nTo install a package, we use the syntax install.packages(\"packge_name\"). A package only needs to be installed once, so this code can be run directly in the console if needed. Generally, you don’t want to save your install package calls in a script, because when you run the script it will re-install the package, which you only need to do once, or if you need to update the package.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#r-resources",
    "href": "s01_r_programming_introduction.html#r-resources",
    "title": "Working in R & RStudio",
    "section": "13 R Resources",
    "text": "13 R Resources\n\nAwesome R Resources to Check out\n\n\n\n\n\n\nLearning R Resources\n\nIntroduction to R lesson in Data Carpentry’s R for data analysis course\nJenny Bryan’s Stat 545 course materials\nJulie Lowndes’ Data Science Training for the Ocean Health Index\nLearn R in the console with swirl\nProgramming in R\nR, RStudio, RMarkdown\n\n\n\nCommunity Resources\n\nNCEAS’ EcoDataScience\nR-Ladies\nrOpenSci\nMinorities in R (MiR)\nTwitter - there is a lot here but some hashtags to start with are:\n\n#rstats\n#TidyTuesday\n#dataviz\n\n\n\n\nCheatsheets\n\nBase R Cheatsheet\nLaTeX Equation Formatting\nMATLAB/R Translation Cheatsheet",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#clearing-the-environment",
    "href": "s01_r_programming_introduction.html#clearing-the-environment",
    "title": "Working in R & RStudio",
    "section": "14 Clearing the environment",
    "text": "14 Clearing the environment\nTake a look at the objects in your Environment (Workspace) in the upper right pane. The Workspace is where user-defined objects accumulate. There are a few useful commands for getting information about your Environment, which make it easier for you to reference your objects when your Environment gets filled with many, many objects.\n\nYou can get a listing of these objects with a couple of different R functions:\n\nobjects()\n\n[1] \"boolean_vector\"  \"chr_vector\"      \"important_value\" \"mean_weight_lb\" \n[5] \"numeric_vector\"  \"science_rocks\"   \"weight_kg\"       \"weight_lb\"      \n\nls()\n\n[1] \"boolean_vector\"  \"chr_vector\"      \"important_value\" \"mean_weight_lb\" \n[5] \"numeric_vector\"  \"science_rocks\"   \"weight_kg\"       \"weight_lb\"      \n\n\nIf you want to remove the object named weight_kg, you can do this:\n\nrm(weight_kg)\n\nTo remove everything (or click the Broom icon in the Environment pane):\n\nrm(list = ls())\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nIt’s good practice to clear your environment. Over time your Global Environmental will fill up with many objects, and this can result in unexpected errors or objects being overridden with unexpected values. Also it’s difficult to read / reference your environment when it’s cluttered!",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#save-workspace-image-to-.rdata",
    "href": "s01_r_programming_introduction.html#save-workspace-image-to-.rdata",
    "title": "Working in R & RStudio",
    "section": "15 Save Workspace Image to .RData?",
    "text": "15 Save Workspace Image to .RData?\n\nDON’T SAVE\nWhen ever you close or switch projects you will be promped with the question: Do you want to save your workspace image to /“currente-project”/ .RData?\nRStudio by default wants to save the state of your environment (the objects you have in your environment pane) into the RData file so that when you open the project again you have the same environment. However, as we discussed above, it is good practice to constantly clear and clean your environment. It is generally NOT a good practice to rely on the state of your environment for your script to run and work. If you are coding reproducibly, your code should be able to reproduce the state of your environment (all the necessary objects) every time you run it. It is much better to rely on your code recreating the environment than the saving the workspace status.\nYou can change the Global Options configuration for the default to be NEVER SAVE MY WORKSPACE. Go to Tools &gt; Global Options. Under the General menu, select Never next to “Save workspace to .RData on exit”. This way you won’t get asked every time you close a project, instead RStudio knows not to save.",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  },
  {
    "objectID": "s01_r_programming_introduction.html#logical-operators-and-expressions",
    "href": "s01_r_programming_introduction.html#logical-operators-and-expressions",
    "title": "Working in R & RStudio",
    "section": "16 Logical operators and expressions",
    "text": "16 Logical operators and expressions\nWe can ask questions about an object using logical operators and expressions. Let’s ask some “questions” about the weight_lb object we made.\n\n== means ‘is equal to’\n!= means ‘is not equal to’\n&lt; means ‘is less than’\n&gt; means ‘is greater than’\n&lt;= means ‘is less than or equal to’\n&gt;= means ‘is greater than or equal to’\n\n\n# examples using logical operators and expressions\nweight_lb == 2\nweight_lb &gt;= 30\nweight_lb != 5",
    "crumbs": [
      "Day 1",
      "Working in R & RStudio"
    ]
  }
]